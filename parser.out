Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> exp
Rule 2     statement -> exp COMMA statement
Rule 3     statement -> <empty>
Rule 4     exp -> exp PL_AND exp
Rule 5     exp -> exp PL_OR exp
Rule 6     exp -> exp PL_COND exp
Rule 7     exp -> exp PL_BICOND exp
Rule 8     exp -> PL_NEG exp
Rule 9     exp -> LPAREN exp RPAREN
Rule 10    exp -> PL_VAR

Terminals, with rules where they appear

COMMA                : 2
LPAREN               : 9
PL_AND               : 4
PL_BICOND            : 7
PL_COND              : 6
PL_NEG               : 8
PL_OR                : 5
PL_VAR               : 10
RPAREN               : 9
error                : 

Nonterminals, with rules where they appear

exp                  : 1 2 4 4 5 5 6 6 7 7 8 9
statement            : 2 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . exp
    (2) statement -> . exp COMMA statement
    (3) statement -> .
    (4) exp -> . exp PL_AND exp
    (5) exp -> . exp PL_OR exp
    (6) exp -> . exp PL_COND exp
    (7) exp -> . exp PL_BICOND exp
    (8) exp -> . PL_NEG exp
    (9) exp -> . LPAREN exp RPAREN
    (10) exp -> . PL_VAR

    $end            reduce using rule 3 (statement -> .)
    PL_NEG          shift and go to state 4
    LPAREN          shift and go to state 5
    PL_VAR          shift and go to state 2

    exp                            shift and go to state 3
    statement                      shift and go to state 1

state 1

    (0) S' -> statement .



state 2

    (10) exp -> PL_VAR .

    COMMA           reduce using rule 10 (exp -> PL_VAR .)
    PL_AND          reduce using rule 10 (exp -> PL_VAR .)
    PL_OR           reduce using rule 10 (exp -> PL_VAR .)
    PL_COND         reduce using rule 10 (exp -> PL_VAR .)
    PL_BICOND       reduce using rule 10 (exp -> PL_VAR .)
    $end            reduce using rule 10 (exp -> PL_VAR .)
    RPAREN          reduce using rule 10 (exp -> PL_VAR .)


state 3

    (1) statement -> exp .
    (2) statement -> exp . COMMA statement
    (4) exp -> exp . PL_AND exp
    (5) exp -> exp . PL_OR exp
    (6) exp -> exp . PL_COND exp
    (7) exp -> exp . PL_BICOND exp

    $end            reduce using rule 1 (statement -> exp .)
    COMMA           shift and go to state 7
    PL_AND          shift and go to state 6
    PL_OR           shift and go to state 10
    PL_COND         shift and go to state 9
    PL_BICOND       shift and go to state 8


state 4

    (8) exp -> PL_NEG . exp
    (4) exp -> . exp PL_AND exp
    (5) exp -> . exp PL_OR exp
    (6) exp -> . exp PL_COND exp
    (7) exp -> . exp PL_BICOND exp
    (8) exp -> . PL_NEG exp
    (9) exp -> . LPAREN exp RPAREN
    (10) exp -> . PL_VAR

    PL_NEG          shift and go to state 4
    LPAREN          shift and go to state 5
    PL_VAR          shift and go to state 2

    exp                            shift and go to state 11

state 5

    (9) exp -> LPAREN . exp RPAREN
    (4) exp -> . exp PL_AND exp
    (5) exp -> . exp PL_OR exp
    (6) exp -> . exp PL_COND exp
    (7) exp -> . exp PL_BICOND exp
    (8) exp -> . PL_NEG exp
    (9) exp -> . LPAREN exp RPAREN
    (10) exp -> . PL_VAR

    PL_NEG          shift and go to state 4
    LPAREN          shift and go to state 5
    PL_VAR          shift and go to state 2

    exp                            shift and go to state 12

state 6

    (4) exp -> exp PL_AND . exp
    (4) exp -> . exp PL_AND exp
    (5) exp -> . exp PL_OR exp
    (6) exp -> . exp PL_COND exp
    (7) exp -> . exp PL_BICOND exp
    (8) exp -> . PL_NEG exp
    (9) exp -> . LPAREN exp RPAREN
    (10) exp -> . PL_VAR

    PL_NEG          shift and go to state 4
    LPAREN          shift and go to state 5
    PL_VAR          shift and go to state 2

    exp                            shift and go to state 13

state 7

    (2) statement -> exp COMMA . statement
    (1) statement -> . exp
    (2) statement -> . exp COMMA statement
    (3) statement -> .
    (4) exp -> . exp PL_AND exp
    (5) exp -> . exp PL_OR exp
    (6) exp -> . exp PL_COND exp
    (7) exp -> . exp PL_BICOND exp
    (8) exp -> . PL_NEG exp
    (9) exp -> . LPAREN exp RPAREN
    (10) exp -> . PL_VAR

    $end            reduce using rule 3 (statement -> .)
    PL_NEG          shift and go to state 4
    LPAREN          shift and go to state 5
    PL_VAR          shift and go to state 2

    statement                      shift and go to state 14
    exp                            shift and go to state 3

state 8

    (7) exp -> exp PL_BICOND . exp
    (4) exp -> . exp PL_AND exp
    (5) exp -> . exp PL_OR exp
    (6) exp -> . exp PL_COND exp
    (7) exp -> . exp PL_BICOND exp
    (8) exp -> . PL_NEG exp
    (9) exp -> . LPAREN exp RPAREN
    (10) exp -> . PL_VAR

    PL_NEG          shift and go to state 4
    LPAREN          shift and go to state 5
    PL_VAR          shift and go to state 2

    exp                            shift and go to state 15

state 9

    (6) exp -> exp PL_COND . exp
    (4) exp -> . exp PL_AND exp
    (5) exp -> . exp PL_OR exp
    (6) exp -> . exp PL_COND exp
    (7) exp -> . exp PL_BICOND exp
    (8) exp -> . PL_NEG exp
    (9) exp -> . LPAREN exp RPAREN
    (10) exp -> . PL_VAR

    PL_NEG          shift and go to state 4
    LPAREN          shift and go to state 5
    PL_VAR          shift and go to state 2

    exp                            shift and go to state 16

state 10

    (5) exp -> exp PL_OR . exp
    (4) exp -> . exp PL_AND exp
    (5) exp -> . exp PL_OR exp
    (6) exp -> . exp PL_COND exp
    (7) exp -> . exp PL_BICOND exp
    (8) exp -> . PL_NEG exp
    (9) exp -> . LPAREN exp RPAREN
    (10) exp -> . PL_VAR

    PL_NEG          shift and go to state 4
    LPAREN          shift and go to state 5
    PL_VAR          shift and go to state 2

    exp                            shift and go to state 17

state 11

    (8) exp -> PL_NEG exp .
    (4) exp -> exp . PL_AND exp
    (5) exp -> exp . PL_OR exp
    (6) exp -> exp . PL_COND exp
    (7) exp -> exp . PL_BICOND exp

    COMMA           reduce using rule 8 (exp -> PL_NEG exp .)
    PL_AND          reduce using rule 8 (exp -> PL_NEG exp .)
    PL_OR           reduce using rule 8 (exp -> PL_NEG exp .)
    PL_COND         reduce using rule 8 (exp -> PL_NEG exp .)
    PL_BICOND       reduce using rule 8 (exp -> PL_NEG exp .)
    $end            reduce using rule 8 (exp -> PL_NEG exp .)
    RPAREN          reduce using rule 8 (exp -> PL_NEG exp .)

  ! PL_AND          [ shift and go to state 6 ]
  ! PL_OR           [ shift and go to state 10 ]
  ! PL_COND         [ shift and go to state 9 ]
  ! PL_BICOND       [ shift and go to state 8 ]


state 12

    (9) exp -> LPAREN exp . RPAREN
    (4) exp -> exp . PL_AND exp
    (5) exp -> exp . PL_OR exp
    (6) exp -> exp . PL_COND exp
    (7) exp -> exp . PL_BICOND exp

    RPAREN          shift and go to state 18
    PL_AND          shift and go to state 6
    PL_OR           shift and go to state 10
    PL_COND         shift and go to state 9
    PL_BICOND       shift and go to state 8


state 13

    (4) exp -> exp PL_AND exp .
    (4) exp -> exp . PL_AND exp
    (5) exp -> exp . PL_OR exp
    (6) exp -> exp . PL_COND exp
    (7) exp -> exp . PL_BICOND exp

    COMMA           reduce using rule 4 (exp -> exp PL_AND exp .)
    PL_AND          reduce using rule 4 (exp -> exp PL_AND exp .)
    PL_OR           reduce using rule 4 (exp -> exp PL_AND exp .)
    $end            reduce using rule 4 (exp -> exp PL_AND exp .)
    RPAREN          reduce using rule 4 (exp -> exp PL_AND exp .)
    PL_COND         shift and go to state 9
    PL_BICOND       shift and go to state 8

  ! PL_COND         [ reduce using rule 4 (exp -> exp PL_AND exp .) ]
  ! PL_BICOND       [ reduce using rule 4 (exp -> exp PL_AND exp .) ]
  ! PL_AND          [ shift and go to state 6 ]
  ! PL_OR           [ shift and go to state 10 ]


state 14

    (2) statement -> exp COMMA statement .

    $end            reduce using rule 2 (statement -> exp COMMA statement .)


state 15

    (7) exp -> exp PL_BICOND exp .
    (4) exp -> exp . PL_AND exp
    (5) exp -> exp . PL_OR exp
    (6) exp -> exp . PL_COND exp
    (7) exp -> exp . PL_BICOND exp

    COMMA           reduce using rule 7 (exp -> exp PL_BICOND exp .)
    PL_AND          reduce using rule 7 (exp -> exp PL_BICOND exp .)
    PL_OR           reduce using rule 7 (exp -> exp PL_BICOND exp .)
    PL_COND         reduce using rule 7 (exp -> exp PL_BICOND exp .)
    PL_BICOND       reduce using rule 7 (exp -> exp PL_BICOND exp .)
    $end            reduce using rule 7 (exp -> exp PL_BICOND exp .)
    RPAREN          reduce using rule 7 (exp -> exp PL_BICOND exp .)

  ! PL_AND          [ shift and go to state 6 ]
  ! PL_OR           [ shift and go to state 10 ]
  ! PL_COND         [ shift and go to state 9 ]
  ! PL_BICOND       [ shift and go to state 8 ]


state 16

    (6) exp -> exp PL_COND exp .
    (4) exp -> exp . PL_AND exp
    (5) exp -> exp . PL_OR exp
    (6) exp -> exp . PL_COND exp
    (7) exp -> exp . PL_BICOND exp

    COMMA           reduce using rule 6 (exp -> exp PL_COND exp .)
    PL_AND          reduce using rule 6 (exp -> exp PL_COND exp .)
    PL_OR           reduce using rule 6 (exp -> exp PL_COND exp .)
    PL_COND         reduce using rule 6 (exp -> exp PL_COND exp .)
    PL_BICOND       reduce using rule 6 (exp -> exp PL_COND exp .)
    $end            reduce using rule 6 (exp -> exp PL_COND exp .)
    RPAREN          reduce using rule 6 (exp -> exp PL_COND exp .)

  ! PL_AND          [ shift and go to state 6 ]
  ! PL_OR           [ shift and go to state 10 ]
  ! PL_COND         [ shift and go to state 9 ]
  ! PL_BICOND       [ shift and go to state 8 ]


state 17

    (5) exp -> exp PL_OR exp .
    (4) exp -> exp . PL_AND exp
    (5) exp -> exp . PL_OR exp
    (6) exp -> exp . PL_COND exp
    (7) exp -> exp . PL_BICOND exp

    COMMA           reduce using rule 5 (exp -> exp PL_OR exp .)
    PL_AND          reduce using rule 5 (exp -> exp PL_OR exp .)
    PL_OR           reduce using rule 5 (exp -> exp PL_OR exp .)
    $end            reduce using rule 5 (exp -> exp PL_OR exp .)
    RPAREN          reduce using rule 5 (exp -> exp PL_OR exp .)
    PL_COND         shift and go to state 9
    PL_BICOND       shift and go to state 8

  ! PL_COND         [ reduce using rule 5 (exp -> exp PL_OR exp .) ]
  ! PL_BICOND       [ reduce using rule 5 (exp -> exp PL_OR exp .) ]
  ! PL_AND          [ shift and go to state 6 ]
  ! PL_OR           [ shift and go to state 10 ]


state 18

    (9) exp -> LPAREN exp RPAREN .

    COMMA           reduce using rule 9 (exp -> LPAREN exp RPAREN .)
    PL_AND          reduce using rule 9 (exp -> LPAREN exp RPAREN .)
    PL_OR           reduce using rule 9 (exp -> LPAREN exp RPAREN .)
    PL_COND         reduce using rule 9 (exp -> LPAREN exp RPAREN .)
    PL_BICOND       reduce using rule 9 (exp -> LPAREN exp RPAREN .)
    $end            reduce using rule 9 (exp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 9 (exp -> LPAREN exp RPAREN .)

